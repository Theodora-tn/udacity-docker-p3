rm ~/.kube/config
aws eks --region us-east-1 update-kubeconfig --name existing-vpc
kubectl get nodes

kubectl apply -f aws-secret.yaml
kubectl apply -f env-secret.yaml
kubectl apply -f env-configmap.yaml

kubectl apply -f backend-feed-deployment.yaml
kubectl apply -f backend-user-deployment.yaml
kubectl apply -f frontend-deployment.yaml
kubectl apply -f reverseproxy-deployment.yaml

kubectl apply -f backend-feed-deployment.yaml
kubectl apply -f backend-user-deployment.yaml
kubectl apply -f backend-feed-service.yaml
kubectl apply -f backend-user-service.yaml

kubectl apply -f frontend-service.yaml
kubectl apply -f reverseproxy-service.yaml

kubectl expose deployment frontend --type=LoadBalancer --name=publicfrontend --port=80
kubectl expose deployment reverseproxy --type=LoadBalancer --name=publicreverseproxy


kubectl delete service backend-feed
kubectl delete deployment backend-feed
kubectl delete service backend-user
kubectl delete deployment backend-user
kubectl delete service frontend
kubectl delete deployment frontend
kubectl delete service reverseproxy
kubectl delete deployment reverseproxy


docker build . -t thientnq/udagram-frontend:v3
docker push thientnq/udagram-frontend:v3

kubectl set image deployment frontend frontend=thientnq/udagram-frontend:v1

curl backend-feed-857c46c78-4r4q2:8080/api/v0/feed

kubectl autoscale deployment reverseproxy --cpu-percent=70 --min=1 --max=2

kubectl get hpa

kubectl delete hpa backend-feed

kubectl get services 
kubectl get pods # It should show the STATUS as Running
kubectl describe pod

kubectl describe services my-service

curl http://<external-ip>:<port>

curl http://backend-feed:8180/api/v0/feed

curl a01c99cd86c97457c9d48b490b75b2b2-1683176714.us-east-1.elb.amazonaws.com:8180/api/v0/feed

publicfrontend       LoadBalancer   172.20.171.25    a641213224c3a40dabc6e44e734e2a4d-375368568.us-east-1.elb.amazonaws.com   8100:31202/TCP   25m
publicreverseproxy   LoadBalancer   172.20.134.100   a683bdf3f5e9e437185f5cf539661221-37112074.us-east-1.elb.amazonaws.com    8180:30597/T


docker build . -t thientnq/udagram-frontend:v8
docker push thientnq/udagram-frontend:v8
kubectl set image deployment frontend frontend=thientnq/udagram-frontend:v8

kubectl exec -it frontend-8764cf697-xl9bj bash

kubectl logs backend-feed-9b9fc9968-h24qc 

client 10.0.17.238
curl http://localhost:8180/api/v0/feed


kubectl exec -it frontend-7bd9d8fd77-ltwx2 sh

kubectl exec --stdin --tty reverseproxy-74d6b985d5-kskpx --/bin/bash
# See what values are set for environment variables in the container
printenv | grep POST

http://a01c99cd86c97457c9d48b490b75b2b2-1683176714.us-east-1.elb.amazonaws.com:8180/api/v0/feed

kubectl rollout restart deployment frontend

docker image prune --all

docker-compose -f docker-compose-build.yaml build --parallel